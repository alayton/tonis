{
    "docs": [
        {
            "location": "/",
            "text": "Tonis\n\n\nTonis is a PSR-7 minimal and flexible web application framework built for simplicity and performance.\n\n\nWhy Tonis?\n\n\nWith the abundance of frameworks and micro-frameworks out there why would you use Tonis?\n\n\n\n\nYou are using PHP 5.5+ and want to take advantage of modern features.\n\n\nYou want 100% unit tested code.\n\n\nYou want high quality code.\n\n\nYou want to take advantage of PSR-7.\n\n\nYou want a middleware ready framework.\n\n\nYou want code that runs on HHVM or PHP7 out of the box.\n\n\nYou want the freedom to choose your own project structure.\n\n\nYou want to get into open source and become a contributor.\n\n\n\n\nIf you answered yes to one or more of the above Tonis might be for you.\n\n\nThe Name\n\n\nI originally got into programming by writing scripts for a game called \nGemstone III\n \n(now Gemstone IV). The name comes from \nTonis\n in Gemstone's world of \n\nElanthia\n. Tonis is the messenger of the gods and is renowned for \nhis speed.\n\n\nBenchmarks\n\n\nBenchmarks for simple hello world applications are nearly useless but are provided to dissuade the inevitable question.\n\n\nSilex: 1.195 ms\nTonis: 0.812 ms\nLumen: 0.805 ms\nSlim3: 0.737 ms\n Slim: 0.562 ms\n\n\n\n\nThese results are generated with ab using 10,000 requests with no concurrency. For more information see the \n\nbench project\n.",
            "title": "Home"
        },
        {
            "location": "/#tonis",
            "text": "Tonis is a PSR-7 minimal and flexible web application framework built for simplicity and performance.",
            "title": "Tonis"
        },
        {
            "location": "/#why-tonis",
            "text": "With the abundance of frameworks and micro-frameworks out there why would you use Tonis?   You are using PHP 5.5+ and want to take advantage of modern features.  You want 100% unit tested code.  You want high quality code.  You want to take advantage of PSR-7.  You want a middleware ready framework.  You want code that runs on HHVM or PHP7 out of the box.  You want the freedom to choose your own project structure.  You want to get into open source and become a contributor.   If you answered yes to one or more of the above Tonis might be for you.",
            "title": "Why Tonis?"
        },
        {
            "location": "/#the-name",
            "text": "I originally got into programming by writing scripts for a game called  Gemstone III  \n(now Gemstone IV). The name comes from  Tonis  in Gemstone's world of  Elanthia . Tonis is the messenger of the gods and is renowned for \nhis speed.",
            "title": "The Name"
        },
        {
            "location": "/#benchmarks",
            "text": "Benchmarks for simple hello world applications are nearly useless but are provided to dissuade the inevitable question.  Silex: 1.195 ms\nTonis: 0.812 ms\nLumen: 0.805 ms\nSlim3: 0.737 ms\n Slim: 0.562 ms  These results are generated with ab using 10,000 requests with no concurrency. For more information see the  bench project .",
            "title": "Benchmarks"
        },
        {
            "location": "/getting-started/installing/",
            "text": "Composer\n\n\nTonis uses \nComposer\n to manage dependencies and is required. Once composer is \ninstalled you can install Tonis using the following command:\n\n\ncomposer require tonis-io/tonis\n\n\n\n\nSee the \nhello world\n for an example \nindex.php\n file.\n\n\nServer Requirements\n\n\nTonis has the following requirement:\n\n\n\n\nPHP 5.5+ or HHVM",
            "title": "Installing"
        },
        {
            "location": "/getting-started/installing/#composer",
            "text": "Tonis uses  Composer  to manage dependencies and is required. Once composer is \ninstalled you can install Tonis using the following command:  composer require tonis-io/tonis  See the  hello world  for an example  index.php  file.",
            "title": "Composer"
        },
        {
            "location": "/getting-started/installing/#server-requirements",
            "text": "Tonis has the following requirement:   PHP 5.5+ or HHVM",
            "title": "Server Requirements"
        },
        {
            "location": "/getting-started/hello-world/",
            "text": "Quick Start\n\n\nHere is an example of a very basic Tonis app. This will look familiar to many micro-frameworks.\n\n\n?php\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n$app = new Tonis\\App;\n$app-\nget('/', function($request, $response) {\n    $response-\nend('Hello from Tonis');\n});\n\n$server = Zend\\Diactoros\\Server::createServer($app, $_SERVER, $_GET, $_POST, $_COOKIE, $_FILES);\n$server-\nlisten();\n\n\n\n\nYou can run it with:\n\n\nphp -S 127.0.0.1:8080 index.php\n\n\nThen, load \nhttp://127.0.0.1:8080\n in a browser to see the output.\n\n\nMounted Middleware\n\n\nThis example shows how to mount middleware to an endpoint. You can use this technique to reuse middleware or mount\nit to a different route.\n\n\n$app    = new \\Tonis\\App;\n\n// this will be executed for every request\n$app-\nadd(function ($request, $response, $next) {\n    $response-\nwrite('pre' . PHP_EOL);\n    $response = $next($request, $response);\n    $response-\nwrite('post' . PHP_EOL);\n\n    return $response\n});\n\n$app-\nget('/', function ($request, $response) {\n    return $response-\nwrite('GET on /');\n});\n\n// routers are middleware and may be mounted to the app\n// additionally, they are reusable, and you can use them to create bundles/packages/modules\n$router = $app-\nrouter();\n$router-\nget('/', function ($request, $response) {\n    return $response-\nwrite('GET on /articles/');\n});\n\n// this mounts the router to /articles so the GET above will respond to /articles/\n$app-\nadd('/articles', $router);\n\n\n\n\nA \nGET\n request to \n/\n using the above app would return:\n\n\npre\nGET on /\npost\n\n\n\n\nA \nGET\n request to \n/articles/\n using the above app would return:\n\n\npre\nGET on /articles/\npost\n\n\n\n\nTonis Project\n\n\nFor a more detailed example you can clone the \nTonis Project\n which \nincludes a recommended application skeleton.\n\n\nOfficial Middleware\n\n\nCheck out the \nofficial middleware\n for some examples of middleware.",
            "title": "Hello world"
        },
        {
            "location": "/getting-started/hello-world/#quick-start",
            "text": "Here is an example of a very basic Tonis app. This will look familiar to many micro-frameworks.  ?php\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n$app = new Tonis\\App;\n$app- get('/', function($request, $response) {\n    $response- end('Hello from Tonis');\n});\n\n$server = Zend\\Diactoros\\Server::createServer($app, $_SERVER, $_GET, $_POST, $_COOKIE, $_FILES);\n$server- listen();  You can run it with:  php -S 127.0.0.1:8080 index.php  Then, load  http://127.0.0.1:8080  in a browser to see the output.",
            "title": "Quick Start"
        },
        {
            "location": "/getting-started/hello-world/#mounted-middleware",
            "text": "This example shows how to mount middleware to an endpoint. You can use this technique to reuse middleware or mount\nit to a different route.  $app    = new \\Tonis\\App;\n\n// this will be executed for every request\n$app- add(function ($request, $response, $next) {\n    $response- write('pre' . PHP_EOL);\n    $response = $next($request, $response);\n    $response- write('post' . PHP_EOL);\n\n    return $response\n});\n\n$app- get('/', function ($request, $response) {\n    return $response- write('GET on /');\n});\n\n// routers are middleware and may be mounted to the app\n// additionally, they are reusable, and you can use them to create bundles/packages/modules\n$router = $app- router();\n$router- get('/', function ($request, $response) {\n    return $response- write('GET on /articles/');\n});\n\n// this mounts the router to /articles so the GET above will respond to /articles/\n$app- add('/articles', $router);  A  GET  request to  /  using the above app would return:  pre\nGET on /\npost  A  GET  request to  /articles/  using the above app would return:  pre\nGET on /articles/\npost",
            "title": "Mounted Middleware"
        },
        {
            "location": "/getting-started/hello-world/#tonis-project",
            "text": "For a more detailed example you can clone the  Tonis Project  which \nincludes a recommended application skeleton.",
            "title": "Tonis Project"
        },
        {
            "location": "/getting-started/hello-world/#official-middleware",
            "text": "Check out the  official middleware  for some examples of middleware.",
            "title": "Official Middleware"
        },
        {
            "location": "/getting-started/contributing/",
            "text": "Overview\n\n\nTonis and related components are open source and licensed as BSD-3-Clause. Contributions are welcome in the form of issue \nreports and pull requests. \n\n\nGetting the Source\n\n\ngit clone git@github.com:tonis-io/tonis\ncomposer install\n\n\n\n\nRunning Tests\n\n\n./vendor/bin/phpunit -c test/phpunit.xml\n\n\n\n\nCoding Standards\n\n\nTonis uses PSR-2 coding standards and checks standards using \nPHP_CodeSniffer\n.\nTo check coding standards:\n\n\nvendor/bin/phpcs --standard=PSR2 -s -p src/ test/\n\n\n\n\nAdditonally, this is automatically checked by \nTravis CI\n and will cause a build failure if not valid.\n\n\nPull Requests\n\n\nAll contributions should be submitted via a pull request on \nGitHub\n. All pull requests have the following\nrequirements before they can be merged:\n\n\n\n\nTravis build must pass.\n\n\nScrutinizer build must pass.\n\n\nCoding standards pass.\n\n\nNo classes with \n B grade.\n\n\nOverall quality does not drop below 9.8.\n\n\nTest coverage must not fall below 100%.\n\n\nNo MAJOR severity issues exist.\n\n\n\n\n\n\n\n\nNOTE\n Documentation is exempt from the above requirements.\n\n\nDocumentation\n\n\nAfter \"Getting the Source\" steps above you can find the documentation in in the \ndocs/\n folder. All documentation is written\nin markdown. Once you update the documentation, commit your changes and open a pull request.",
            "title": "Contributing"
        },
        {
            "location": "/getting-started/contributing/#overview",
            "text": "Tonis and related components are open source and licensed as BSD-3-Clause. Contributions are welcome in the form of issue \nreports and pull requests.",
            "title": "Overview"
        },
        {
            "location": "/getting-started/contributing/#getting-the-source",
            "text": "git clone git@github.com:tonis-io/tonis\ncomposer install",
            "title": "Getting the Source"
        },
        {
            "location": "/getting-started/contributing/#running-tests",
            "text": "./vendor/bin/phpunit -c test/phpunit.xml",
            "title": "Running Tests"
        },
        {
            "location": "/getting-started/contributing/#coding-standards",
            "text": "Tonis uses PSR-2 coding standards and checks standards using  PHP_CodeSniffer .\nTo check coding standards:  vendor/bin/phpcs --standard=PSR2 -s -p src/ test/  Additonally, this is automatically checked by  Travis CI  and will cause a build failure if not valid.",
            "title": "Coding Standards"
        },
        {
            "location": "/getting-started/contributing/#pull-requests",
            "text": "All contributions should be submitted via a pull request on  GitHub . All pull requests have the following\nrequirements before they can be merged:   Travis build must pass.  Scrutinizer build must pass.  Coding standards pass.  No classes with   B grade.  Overall quality does not drop below 9.8.  Test coverage must not fall below 100%.  No MAJOR severity issues exist.     NOTE  Documentation is exempt from the above requirements.",
            "title": "Pull Requests"
        },
        {
            "location": "/getting-started/contributing/#documentation",
            "text": "After \"Getting the Source\" steps above you can find the documentation in in the  docs/  folder. All documentation is written\nin markdown. Once you update the documentation, commit your changes and open a pull request.",
            "title": "Documentation"
        },
        {
            "location": "/getting-started/license/",
            "text": "BSD 3-Clause\n\n\nCopyright (c) 2015, Kyle Spraggs.\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n\n\n\n\n\nNeither the name of Kyle Spraggs nor the names of its\n    contributors may be used to endorse or promote products derived from this\n    software without specific prior written permission.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "title": "License"
        },
        {
            "location": "/getting-started/license/#bsd-3-clause",
            "text": "Copyright (c) 2015, Kyle Spraggs.\nAll rights reserved.  Redistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:    Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.    Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.    Neither the name of Kyle Spraggs nor the names of its\n    contributors may be used to endorse or promote products derived from this\n    software without specific prior written permission.    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "title": "BSD 3-Clause"
        },
        {
            "location": "/basics/routing/",
            "text": "Overview\n\n\nRouting refers to the definition of URIs and how an application responds to a client request. A route\nis a combination of a \nURI\n, a \n\nrequest method\n, and one or more handlers.\n\n\nThe following is an example of a very basic route:\n\n\n$app = new \\Tonis\\App;\n\n// respond with \nhello world\n when a GET request is made to \n/\n\n$app-\nget('/', function ($request, $response) {\n    $response-\nend(\nhello world\n);    \n});\n\n\n\n\nRoute Methods\n\n\nTonis supports the following HTTP methods: \nGET\n, \nPOST\n, \nPUT\n, \nPATCH\n, \nDELETE\n, \nOPTIONS\n, \n\nHEAD\n\n\n$app = new \\Tonis\\App;\n\n$app-\nget('/', function ($request, $response) {\n    $response-\nend(\nGET request to homepage\n);    \n});\n\n$app-\npost('/', function ($request, $response) {\n    $response-\nend(\nPOST request to homepage\n);    \n});\n\n\n\n\nRoute Parameters\n\n\nRoute parameters may be used by enclosing part of the route in \n{...}\n.\n\n\n$app = new \\Tonis\\App;\n\n$app-\nget('/{name}', function ($request, $response) {\n    $response-\nend('I match /foo, /bar, /foobar, etc.');\n});\n\n\n\n\nYou can specify a custom pattern match by using \n{foo:regex}\n where regex is a regular expression.\n\n\n$app = new \\Tonis\\App;\n\n$app-\nget('/{name:[0-9]+', function ($request, $response) {\n    $response-\nend('I match /123 but not /foo');\n});\n\n\n\n\nAdditionally, parts of the route enclosed in \n[...]\n are considered optional.\n\n\n$app = new \\Tonis\\App;\n\n$app-\nget('/foo[bar]', function ($request, $response) {\n    $response-\nend('I match /foo and /foobar but not /bar');\n});\n\n\n\n\nAccessing Parameters\n\n\nAll matched route parameters are available in the \n$requestuest\n object of the route handler using \n\nArrayAccess\n. \n\n\n$app = new \\Tonis\\App;\n\n$app-\nget('/{name}', function ($request, $response) {\n    $response-\nend('Hi ' . $request['name']);\n});",
            "title": "Routing"
        },
        {
            "location": "/basics/routing/#overview",
            "text": "Routing refers to the definition of URIs and how an application responds to a client request. A route\nis a combination of a  URI , a  request method , and one or more handlers.  The following is an example of a very basic route:  $app = new \\Tonis\\App;\n\n// respond with  hello world  when a GET request is made to  / \n$app- get('/', function ($request, $response) {\n    $response- end( hello world );    \n});",
            "title": "Overview"
        },
        {
            "location": "/basics/routing/#route-methods",
            "text": "Tonis supports the following HTTP methods:  GET ,  POST ,  PUT ,  PATCH ,  DELETE ,  OPTIONS ,  HEAD  $app = new \\Tonis\\App;\n\n$app- get('/', function ($request, $response) {\n    $response- end( GET request to homepage );    \n});\n\n$app- post('/', function ($request, $response) {\n    $response- end( POST request to homepage );    \n});",
            "title": "Route Methods"
        },
        {
            "location": "/basics/routing/#route-parameters",
            "text": "Route parameters may be used by enclosing part of the route in  {...} .  $app = new \\Tonis\\App;\n\n$app- get('/{name}', function ($request, $response) {\n    $response- end('I match /foo, /bar, /foobar, etc.');\n});  You can specify a custom pattern match by using  {foo:regex}  where regex is a regular expression.  $app = new \\Tonis\\App;\n\n$app- get('/{name:[0-9]+', function ($request, $response) {\n    $response- end('I match /123 but not /foo');\n});  Additionally, parts of the route enclosed in  [...]  are considered optional.  $app = new \\Tonis\\App;\n\n$app- get('/foo[bar]', function ($request, $response) {\n    $response- end('I match /foo and /foobar but not /bar');\n});",
            "title": "Route Parameters"
        },
        {
            "location": "/basics/routing/#accessing-parameters",
            "text": "All matched route parameters are available in the  $requestuest  object of the route handler using  ArrayAccess .   $app = new \\Tonis\\App;\n\n$app- get('/{name}', function ($request, $response) {\n    $response- end('Hi ' . $request['name']);\n});",
            "title": "Accessing Parameters"
        },
        {
            "location": "/basics/middleware/",
            "text": "Overview\n\n\nMiddleware is a \ncallable\n that interacts with the request-response cycle. \nIt may modify the request/response, terminate the request-response cycle early, and call the next middleware in the stack. \nMiddleware accepts the following arguments:\n\n\n\n\n$request\n \nMUST\n implement \nPsr\\HttpMessage\\RequestInterface\n\n\n$response\n \nMUST\n implement \\Psr\\HttpMessage\\ResponseInterface`\n\n\n$next\n \nMUST\n be a callable\n\n\n\n\nMiddleware may be loaded at the application level or router level and may include a mount path. Loading a series of \nmiddleware on the same mount path will create a stack for that path. \n\n\nApplication Level Middleware\n\n\nApplication level middleware is added to \nTonis\n with the \nadd\n method and may include a path to mount to.\n\n\n$app = new \\Tonis\\App;\n\n// middleware gets executed on every request \n$app-\nadd(function ($request, $response, $next) {\n    $response-\nwrite('always executed');\n    return $next($request, $response);\n});\n\n$app-\nget('/articles/{id}', function ($request, $response) {\n    $response-\nend('Articles');\n});\n\n\n\n\nRouter Level Middleware\n\n\nRouter level middleware is similar to application middleware except it is added to an instance of \nTonis\\Router\n.\nTypically, you'll create a router instance using the \nrouter()\n method.\n\n\n$app    = new \\Tonis\\App;\n$router = $app-\nrouter():\n\n$router-\nadd(function ($request, $response, $next) {\n    $response-\nwrite('always executed');\n    return $next($request, $response);\n});\n\n$router-\nget('/{id}', function ($request, $response) {\n    $response-\nend('Articles');\n});\n\n// this mounts the $router middleware\n$app-\nadd($router);\n\n\n\n\nNOTE\n Middleware added to a router and then mounted to Tonis with \nadd\n will only be executed if the path matches.",
            "title": "Middleware"
        },
        {
            "location": "/basics/middleware/#overview",
            "text": "Middleware is a  callable  that interacts with the request-response cycle. \nIt may modify the request/response, terminate the request-response cycle early, and call the next middleware in the stack. \nMiddleware accepts the following arguments:   $request   MUST  implement  Psr\\HttpMessage\\RequestInterface  $response   MUST  implement \\Psr\\HttpMessage\\ResponseInterface`  $next   MUST  be a callable   Middleware may be loaded at the application level or router level and may include a mount path. Loading a series of \nmiddleware on the same mount path will create a stack for that path.",
            "title": "Overview"
        },
        {
            "location": "/basics/middleware/#application-level-middleware",
            "text": "Application level middleware is added to  Tonis  with the  add  method and may include a path to mount to.  $app = new \\Tonis\\App;\n\n// middleware gets executed on every request \n$app- add(function ($request, $response, $next) {\n    $response- write('always executed');\n    return $next($request, $response);\n});\n\n$app- get('/articles/{id}', function ($request, $response) {\n    $response- end('Articles');\n});",
            "title": "Application Level Middleware"
        },
        {
            "location": "/basics/middleware/#router-level-middleware",
            "text": "Router level middleware is similar to application middleware except it is added to an instance of  Tonis\\Router .\nTypically, you'll create a router instance using the  router()  method.  $app    = new \\Tonis\\App;\n$router = $app- router():\n\n$router- add(function ($request, $response, $next) {\n    $response- write('always executed');\n    return $next($request, $response);\n});\n\n$router- get('/{id}', function ($request, $response) {\n    $response- end('Articles');\n});\n\n// this mounts the $router middleware\n$app- add($router);  NOTE  Middleware added to a router and then mounted to Tonis with  add  will only be executed if the path matches.",
            "title": "Router Level Middleware"
        },
        {
            "location": "/basics/error-handlers/",
            "text": "Overview\n\n\nTonis supports error handlers for not found routes as well as exceptions. \n\n\nExceptions\n\n\nAny exception during the request/response lifecycle will be handled by a instance of \nTonis\\Handler\\ErrorInterface\n\nwhich has the following signature.\n\n\npublic function __invoke(Request $request, Response $response, Exception $exception);\n\n\n\n\nTonis uses \nTonis\\Handler\\Error\n by default but you may override the default behavior.\n\n\nRoute Not Found\n\n\nWhen no route matches the request an instance of \nTonis\\Handler\\NotFoundInterface\n will be called which has the \nfollowing signature.\n\n\npublic function __invoke(Request $request, Response $response);\n\n\n\n\nTonis uses \nTonis\\Handler\\NotFound\n by default but you may override the default behavior.",
            "title": "Error Handlers"
        },
        {
            "location": "/basics/error-handlers/#overview",
            "text": "Tonis supports error handlers for not found routes as well as exceptions.",
            "title": "Overview"
        },
        {
            "location": "/basics/error-handlers/#exceptions",
            "text": "Any exception during the request/response lifecycle will be handled by a instance of  Tonis\\Handler\\ErrorInterface \nwhich has the following signature.  public function __invoke(Request $request, Response $response, Exception $exception);  Tonis uses  Tonis\\Handler\\Error  by default but you may override the default behavior.",
            "title": "Exceptions"
        },
        {
            "location": "/basics/error-handlers/#route-not-found",
            "text": "When no route matches the request an instance of  Tonis\\Handler\\NotFoundInterface  will be called which has the \nfollowing signature.  public function __invoke(Request $request, Response $response);  Tonis uses  Tonis\\Handler\\NotFound  by default but you may override the default behavior.",
            "title": "Route Not Found"
        },
        {
            "location": "/objects/request/",
            "text": "Overview\n\n\nThe Request object encapsulates data sent during a HTTP request. The \nTonis\\Http\\Request\n object decorates \n\nZend\\Stratigility\\Http\\Request\n which implements \nPsr\\Http\\Message\\RequestInterface\n. It's highly recommended that you\nreview \nPSR-7 - HTTP messages interfaces\n to fully understand PSR-7.\n\n\nThe following are methods available in addition to what PSR-7 provides.\n\n\nArrayAccess\n\n\nTonis\\Http\\Request\n implements \nArrayAccess\n to provide access to the route match parameters.\n\n\n$app-\nget('/hello/{name}', function ($request, $response) {\n    // output is Hello, foo\n    return $response-\nwrite('Hello, ' . $request['name']);\n});\n\n\n\n\napp()\n\n\npublic function app(): Tonis\\App\n\n\nRetrieve the instance of \nTonis\\App\n bound to the request.\n\n\n$app-\nget('/', function ($request, $response) {\n    // output is Tonis\\App\n    return $response-\nwrite(get_class($request-\napp()); \n});\n\n\n\n\ngetParams()\n\n\npublic function getParams(): array\n\n\nGet all route params from the matched route.\n\n\n$app-\nget('/hello/{name}', function ($request, $response) {\n    // output is array ('name' =\n 'foo',)\n    return $response-\nwrite(var_export($request-\ngetParams(), true));\n});",
            "title": "Request"
        },
        {
            "location": "/objects/request/#overview",
            "text": "The Request object encapsulates data sent during a HTTP request. The  Tonis\\Http\\Request  object decorates  Zend\\Stratigility\\Http\\Request  which implements  Psr\\Http\\Message\\RequestInterface . It's highly recommended that you\nreview  PSR-7 - HTTP messages interfaces  to fully understand PSR-7.  The following are methods available in addition to what PSR-7 provides.",
            "title": "Overview"
        },
        {
            "location": "/objects/request/#arrayaccess",
            "text": "Tonis\\Http\\Request  implements  ArrayAccess  to provide access to the route match parameters.  $app- get('/hello/{name}', function ($request, $response) {\n    // output is Hello, foo\n    return $response- write('Hello, ' . $request['name']);\n});",
            "title": "ArrayAccess"
        },
        {
            "location": "/objects/request/#app",
            "text": "public function app(): Tonis\\App  Retrieve the instance of  Tonis\\App  bound to the request.  $app- get('/', function ($request, $response) {\n    // output is Tonis\\App\n    return $response- write(get_class($request- app()); \n});",
            "title": "app()"
        },
        {
            "location": "/objects/request/#getparams",
            "text": "public function getParams(): array  Get all route params from the matched route.  $app- get('/hello/{name}', function ($request, $response) {\n    // output is array ('name' =  'foo',)\n    return $response- write(var_export($request- getParams(), true));\n});",
            "title": "getParams()"
        },
        {
            "location": "/objects/response/",
            "text": "Overview\n\n\nThe Response object encapsulates data sent during a HTTP response. The \nTonis\\Http\\Response\n object decorates \n\nZend\\Stratigility\\Http\\Response\n which implements \nPsr\\Http\\Message\\ResponseInterface\n. It's highly recommended that you\nreview \nPSR-7 - HTTP messages interfaces\n to fully understand PSR-7.\n\n\nThe following are methods available in addition to what PSR-7 provides.\n\n\napp()\n\n\npublic function app(): Tonis\\App\n\n\nRetrieve the instance of \nTonis\\App\n bound to the response.\n\n\n$app-\nget('/', function ($request, $response) {\n    // output is Tonis\\App\n    return $response-\nwrite(get_class($reponse-\napp()); \n});\n\n\n\n\njson()\n\n\npublic function json(mixed $input): Tonis\\Http\\Response\n\n\nEncodes the input as JSON and sets the Content-Type header to application/json.\n\n\n$app-\nget('/', function ($request, $response) {\n    // output is {\nfoo\n: \nbar\n}\n    return $response-\njson(['foo' =\n 'bar']);\n});\n\n\n\n\njsonp()\n\n\npublic function jsonp(mixed $input, string $callback): Tonis\\Http\\Response\n\n\nEncodes the input as JSONP and sets the Content-Type header to application/javascript.\n\n\n$app-\nget('/', function ($request, $response) {\n    // output is MyFunction({\nfoo\n: \nbar\n});\n    return $response-\njsonp(['foo' =\n 'bar'], 'MyFunction);\n});\n\n\n\n\nrender()\n\n\npublic function render(string $template, array $params = []): string\n\n\nAttempts to render the \n$template\n with \n$params\n using the ViewManager. If a strategy \nis not available then the Tonis fallback strategy is used. \n\n\n$app-\nget('/article/{id}', function ($request, $response) {\n    // output is render result of `article/view` template\n    return $response-\nrender('article/view', $request-\ngetParams());\n});",
            "title": "Response"
        },
        {
            "location": "/objects/response/#overview",
            "text": "The Response object encapsulates data sent during a HTTP response. The  Tonis\\Http\\Response  object decorates  Zend\\Stratigility\\Http\\Response  which implements  Psr\\Http\\Message\\ResponseInterface . It's highly recommended that you\nreview  PSR-7 - HTTP messages interfaces  to fully understand PSR-7.  The following are methods available in addition to what PSR-7 provides.",
            "title": "Overview"
        },
        {
            "location": "/objects/response/#app",
            "text": "public function app(): Tonis\\App  Retrieve the instance of  Tonis\\App  bound to the response.  $app- get('/', function ($request, $response) {\n    // output is Tonis\\App\n    return $response- write(get_class($reponse- app()); \n});",
            "title": "app()"
        },
        {
            "location": "/objects/response/#json",
            "text": "public function json(mixed $input): Tonis\\Http\\Response  Encodes the input as JSON and sets the Content-Type header to application/json.  $app- get('/', function ($request, $response) {\n    // output is { foo :  bar }\n    return $response- json(['foo' =  'bar']);\n});",
            "title": "json()"
        },
        {
            "location": "/objects/response/#jsonp",
            "text": "public function jsonp(mixed $input, string $callback): Tonis\\Http\\Response  Encodes the input as JSONP and sets the Content-Type header to application/javascript.  $app- get('/', function ($request, $response) {\n    // output is MyFunction({ foo :  bar });\n    return $response- jsonp(['foo' =  'bar'], 'MyFunction);\n});",
            "title": "jsonp()"
        },
        {
            "location": "/objects/response/#render",
            "text": "public function render(string $template, array $params = []): string  Attempts to render the  $template  with  $params  using the ViewManager. If a strategy \nis not available then the Tonis fallback strategy is used.   $app- get('/article/{id}', function ($request, $response) {\n    // output is render result of `article/view` template\n    return $response- render('article/view', $request- getParams());\n});",
            "title": "render()"
        },
        {
            "location": "/objects/router/",
            "text": "Overview\n\n\nThe \nTonis\\Router\n handles all routing in Tonis and is built on \nnikic/FastRoute\n for optimal performance. For more\ninformation on routing see the \nrouting documentation\n.\n\n\nThe following are methods available.\n\n\nHTTP Verbs\n\n\npublic function verb(string $path, callable $handler): void\n\n\nCreates a route that matches on the specified HTTP verb and the path specified. \n\n\nHTTP Verb can be one of: \nget\n \npost\n \nput\n \npatch\n \ndelete\n \nhead\n \noptions\n\n\n$router-\nget('/', function ($request, $response) { ... });\n\n\n\n\nany()\n\n\npublic function any(string $path, callable $handler): void\n\n\nCreates a route that matches any HTTP verb and the path specified.\n\n\n$router-\nany('/', function ($request, $response) { ... });\n\n\n\n\nparam()\n\n\npublic function param(string $param, callable $handler): void\n\n\nAdds middleware for a matched route parameter. \n\n\n// this will be called anytime \narticle_id\n exists in a route\n$router-\nparam('article_id', function ($request, $response, $next) {\n    // assume repository was injected\n    $article = $this-\nrepository-\nfind($request['article_id']);\n\n    // this will be caught by the default error handler and show a nice 404 page\n    if (!$article) {\n        throw new \\RuntimeException('No article', 404);\n    }\n\n    // now \narticle\n is available to any handler with article_id in the route\n    // this let's you easily reuse common code\n    $request['article'] = $article;\n    return $next($request, $response);\n});\n\n// create a route with \narticle_id\n so the handler can be called\n$router-\nget('/articles/{article_id};\n\n\n\n\nadd()\n\n\npublic function add(callable $middleware): void\n\n\nAdd middleware to the router. Middleware is called prior to dispatching the route handler and only if a route matches.\n\n\n$router-\nadd(function ($request, $response, $next) {\n    $response-\nwrite('pre ');\n    $response = $next($request, $response);\n    $response-\nwrite(' post');\n\n    return $response;\n});\n\n// a call to \nGET /\n would output \npre GET / post\n\n$router-\nget('/', function ($request, $response) {\n    return $response-\nwrite('GET /');\n});",
            "title": "Router"
        },
        {
            "location": "/objects/router/#overview",
            "text": "The  Tonis\\Router  handles all routing in Tonis and is built on  nikic/FastRoute  for optimal performance. For more\ninformation on routing see the  routing documentation .  The following are methods available.",
            "title": "Overview"
        },
        {
            "location": "/objects/router/#http-verbs",
            "text": "public function verb(string $path, callable $handler): void  Creates a route that matches on the specified HTTP verb and the path specified.   HTTP Verb can be one of:  get   post   put   patch   delete   head   options  $router- get('/', function ($request, $response) { ... });",
            "title": "HTTP Verbs"
        },
        {
            "location": "/objects/router/#any",
            "text": "public function any(string $path, callable $handler): void  Creates a route that matches any HTTP verb and the path specified.  $router- any('/', function ($request, $response) { ... });",
            "title": "any()"
        },
        {
            "location": "/objects/router/#param",
            "text": "public function param(string $param, callable $handler): void  Adds middleware for a matched route parameter.   // this will be called anytime  article_id  exists in a route\n$router- param('article_id', function ($request, $response, $next) {\n    // assume repository was injected\n    $article = $this- repository- find($request['article_id']);\n\n    // this will be caught by the default error handler and show a nice 404 page\n    if (!$article) {\n        throw new \\RuntimeException('No article', 404);\n    }\n\n    // now  article  is available to any handler with article_id in the route\n    // this let's you easily reuse common code\n    $request['article'] = $article;\n    return $next($request, $response);\n});\n\n// create a route with  article_id  so the handler can be called\n$router- get('/articles/{article_id};",
            "title": "param()"
        },
        {
            "location": "/objects/router/#add",
            "text": "public function add(callable $middleware): void  Add middleware to the router. Middleware is called prior to dispatching the route handler and only if a route matches.  $router- add(function ($request, $response, $next) {\n    $response- write('pre ');\n    $response = $next($request, $response);\n    $response- write(' post');\n\n    return $response;\n});\n\n// a call to  GET /  would output  pre GET / post \n$router- get('/', function ($request, $response) {\n    return $response- write('GET /');\n});",
            "title": "add()"
        },
        {
            "location": "/resources/official-middleware/",
            "text": "Overview\n\n\nThe following is a list of officially supported middleware:\n\n\n\n\n\n\n\n\nMiddleware\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nError Handler\n\n\nAdds an error handler that supports logging with Mongolog.\n\n\n\n\n\n\nResponse Time\n\n\nAdds a X-Response-Time header to your responses.",
            "title": "Official Middleware"
        },
        {
            "location": "/resources/official-middleware/#overview",
            "text": "The following is a list of officially supported middleware:     Middleware  Description      Error Handler  Adds an error handler that supports logging with Mongolog.    Response Time  Adds a X-Response-Time header to your responses.",
            "title": "Overview"
        }
    ]
}